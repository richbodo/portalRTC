)]}'
{"version":3,"sources":["fds:webrtc/lib/client/shim.coffee","fds:webrtc/lib/client/image_streamer.coffee","fds:webrtc/lib/client/message_stream_proxy.coffee","fds:webrtc/lib/client/multi_webrtc_signaller_manager.coffee","fds:webrtc/lib/client/reactive_data_channel_factory.coffee","fds:webrtc/lib/client/single_web_rtc_signaller_factory.coffee","fds:webrtc/lib/client/webrtc_signaller.coffee"],"names":[],"mappings":"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","file":"/packages/fds_webrtc.js","sourcesContent":["# WebRTC Shim\n\n@RTCPeerConnection = window.mozRTCPeerConnection \\\n    or window.PeerConnection \\\n    or window.RTCPeerConnection \\\n    or window.webkitPeerConnection00 \\\n    or window.webkitRTCPeerConnection\n\n@IceCandidate = window.mozRTCIceCandidate or window.RTCIceCandidate\n\n@SessionDescription = window.mozRTCSessionDescription \\\n    or window.RTCSessionDescription\n\n@MediaStream = window.MediaStream or window.webkitMediaStream\n\nnavigator.getUserMedia = navigator.mozGetUserMedia \\\n    or navigator.getUserMedia \\\n    or navigator.webkitGetUserMedia \\\n    or navigator.msGetUserMedia\n\n@URL = window.URL or window.webkitURL or window.msURL or window.oURL\n\n","'use strict'\n\nbyteLength = (str) ->\n  # From http://stackoverflow.com/questions/5515869/string-length-in-bytes-in-javascript\n  encodeURI(str).split(/%..|./).length - 1\n\nclass @ImageVideoUserMediaGetter\n  constructor: (mediaConfig = {}) ->\n    @_localStreamUrl = new ReactiveVar\n    @_mediaConfig = _.defaults mediaConfig,\n      audio: false\n      video:\n        mandatory:\n          maxWidth: 320\n          maxHeight: 240\n          minWidth: 320\n          minHeight: 240\n\n  start: ->\n    MediaStreamTrack.getSources @_gotMediaSources\n\n  stop: =>\n    @_stream?.stop()\n    @_localStreamUrl.set null\n\n  _gotMediaSources: (sources) =>\n    for source in sources\n      if source.kind == 'video' and source.facing == 'user'\n        @_mediaConfig.video.optional ?= []\n        @_mediaConfig.video.optional.push\n        break\n    navigator.getUserMedia @_mediaConfig, @_gUMSuccess, @_gUMError\n\n  getStreamUrl: ->\n    @_localStreamUrl.get()\n\n  _gUMSuccess: (@_stream) =>\n    @_localStreamUrl.set(URL.createObjectURL(@_stream))\n\n  _gUMError: (error) =>\n    console.error error\n\n\nclass @ImageStreamer\n  constructor: (options = {}) ->\n    _.defaults options,\n      quality: 0.5\n      width: 200\n      height: 150\n      fps: 30\n      shouldSendVideo: true\n      dataUrlType: 'image/webp'\n    @_dataUrlType = options.dataUrlType\n    @_ready = new ReactiveVar false\n    @_quality = new ReactiveVar(options.quality)\n    @_localImageDataUrl = new ReactiveVar\n    @_localImageByteLength = new ReactiveVar\n    @_localImageBytesPerSecond = new ReactiveVar\n    @_lastUpdatedTime = null\n    @_sumOfBytesSinceLastTime = 0\n    @_width = new ReactiveVar options.width\n    @_height = new ReactiveVar options.height\n    @_fps = new ReactiveVar options.fps\n    @_timeSinceLastFrame = Infinity\n    @_lastFrameAt = 0\n    @_shoulSendVideo = new ReactiveVar options.shouldSendVideo\n    @_otherVideo = new ReactiveVar(null)\n    @_canvas = document.createElement('canvas')\n    @_ctx = @_canvas.getContext('2d')\n\n  init: (@_dataChannel, @_videoEl, @_imgEl) =>\n\n    @_ready.set true\n    @_sendNextVideo = true\n\n    @_dataChannel.addOnMessageListener (data) =>\n      message = JSON.parse(data)\n      return unless message?\n      switch message.type\n        when 'send'\n          @_otherVideo.set(message.dataUrl)\n          @_dataChannel.sendData(\n            JSON.stringify(\n              type: 'ack'\n            )\n          )\n        when 'ack'\n          @_sendNextVideo = true\n\n  start: =>\n    @_nextAnimationFrame = requestAnimationFrame @_update\n\n  stop: =>\n    cancelAnimationFrame @_nextAnimationFrame\n\n  ready: =>\n    @_ready.get()\n\n  getLocalImageDataUrl: =>\n    @_localImageDataUrl.get()\n\n  getLocalImageByteLength: =>\n    @_localImageByteLength.get()\n\n  getLocalImageBytesPerSecond: =>\n    @_localImageBytesPerSecond.get()\n\n  getOtherVideo: =>\n    @_otherVideo.get()\n\n  getQuality: =>\n    @_quality.get()\n\n  setQuality: (value) =>\n    @_quality.set(value)\n\n  getWidth: =>\n    @_width.get()\n\n  getHeight: =>\n    @_height.get()\n\n  getFps: =>\n    @_fps.get()\n\n  getShouldSendVideo: =>\n    @_shoulSendVideo.get()\n\n  setWidth: (width) =>\n    @_width.set(width)\n\n  setHeight: (height) =>\n    @_height.set(height)\n\n  setFps: (fps) =>\n    @_fps.set(fps)\n\n  setShouldSendVideo: (state) =>\n    @_shoulSendVideo.set state\n\n  _update: =>\n    now = Date.now()\n    if not @_shoulSendVideo.get() or  now - @_lastFrameAt < 1000 / @_fps.get()\n      requestAnimationFrame @_update\n      return\n    @_lastFrameAt = now\n    width = @_width.get()\n    height = @_height.get()\n    @_canvas.width = width\n    @_canvas.height = height\n    @_ctx.drawImage(@_videoEl, 0, 0, width, height)\n    data = @_canvas.toDataURL(@_dataUrlType, @_quality.get())\n    dataBytesLength = byteLength(data)\n    @_localImageByteLength.set dataBytesLength\n    @_localImageDataUrl.set data\n    if @_dataChannel.isOpen() and @_sendNextVideo\n      if @_lastUpdatedTime?\n        timeDiff = now - @_lastUpdatedTime\n        if timeDiff > 1000\n          @_localImageBytesPerSecond.set(\n            1000 / timeDiff * @_sumOfBytesSinceLastTime\n          )\n          @_lastUpdatedTime = now\n          @_sumOfBytesSinceLastTime = 0\n        else\n          @_sumOfBytesSinceLastTime += dataBytesLength\n      else\n        @_lastUpdatedTime = now\n        @_sumOfBytesSinceLastTime += dataBytesLength\n      @_dataChannel.sendData(\n        JSON.stringify(\n          type: 'send'\n          dataUrl: data\n        )\n      )\n      # XXX: Should be set to false, trying to find errors atm tho.\n      @_sendNextVideo = true\n\n    requestAnimationFrame @_update\n\n\n","class share.MessageStreamProxy\n  constructor: (@_stream, @_channelName, @_to) ->\n\n  emit: (message) ->\n    message._to = @_to\n    @_stream.emit @_channelName, message\n\n","# A signaller who will listen to messages from anyone.\nclass @MultiWebRTCSignallerManager\n  constructor: (@_stream, @_channelName, @_id, @_servers, @_config, mediaConfig) ->\n    @_connectionMap = {}\n    @setMediaConfig(mediaConfig)\n    @_stream.on @_channelName, @_handleMessage\n    @_data = new ReactiveVar()\n\n  setMediaConfig: (@_mediaConfig) ->\n\n  getData: ->\n    @_data.get()\n\n  requestCall: ->\n    @_stream.emit @_channelName,\n      callMe: true\n\n  _handleMessage: (message) =>\n    signallerConnection = @_connectionMap[message.from]\n    unless signallerConnection?\n      signaller = new WebRTCSignaller(\n        new share.MessageStreamProxy(@_stream, @_channelName, message.from),\n        @_id,\n        @_servers,\n        @_config,\n        @_mediaConfig\n      )\n      signallerConnection =\n        signaller: signaller\n        dataChannels: {}\n      @_connectionMap[message.from] = signallerConnection\n\n      Tracker.autorun =>\n        dataChannels = signaller.getDataChannels()\n        for dataChannel in dataChannels\n          unless signallerConnection[dataChannel.getLabel()]?\n            Tracker.autorun =>\n              @_data.set dataChannel.getData()\n    signaller = signallerConnection.signaller\n\n    signaller.handleMessage(message)\n\n","class ReactiveDataChannel\n  constructor: ->\n    @_isOpen = new ReactiveVar(false)\n    @_data = new ReactiveVar(null)\n    @_listeners = []\n\n  getLabel: ->\n    @_label\n\n  setLabelAndConfig: (@_label, @_config = {}) ->\n    if @_dataChannel?\n      throw new Error '\n        Unable to set label and config, a data channel has aleady been set\n      '\n\n  setDataChannel: (rtcDataChannel) ->\n    if @_rtcDataChannel?\n      @close()\n    @_setRtcDataChannel(rtcDataChannel)\n\n  create: (rtcPeerConnection) ->\n    #unless @_label?\n    #  throw new Error 'Invalid state, no label is set'\n    #unless @_config?\n    #  throw new Error 'Invalid state, no config is set'\n    try\n      rtcDataChannel = rtcPeerConnection.createDataChannel(\n        @_label\n        @_config\n      )\n    catch error\n      console.error(\"Unable to create data channel:#{error}\")\n      return\n    @_setRtcDataChannel(rtcDataChannel)\n\n  isOpen: ->\n    @_isOpen.get()\n\n  getData: ->\n    @_data.get()\n\n  sendData: (data) ->\n    unless @_rtcDataChannel?\n      throw new Error 'No data channel set'\n    unless @isOpen()\n      throw new Error 'Data channel is not open'\n    # XXX: Have to check it open\n    if @_rtcDataChannel.readyState == 'open'\n      try\n        @_rtcDataChannel.send(data)\n      catch error\n        console.error error\n\n  close: ->\n    @_rtcDataChannel?.close()\n    @_rtcDataChannel = null\n    @_isOpen.set(false)\n\n  _setRtcDataChannel: (@_rtcDataChannel) ->\n    @_rtcDataChannel.onmessage = @_handleMessage\n    @_rtcDataChannel.onopen = @_handleStateChange\n    @_rtcDataChannel.onclose = @_handleOnClose\n\n  _handleMessage: (event) =>\n    @_data.set event.data\n    for listener in @_listeners\n      listener(event.data)\n\n  addOnMessageListener: (listener) =>\n    @_listeners.push listener\n\n  _handleOnClose: =>\n    @close()\n    @_handleStateChange arguments...\n\n  _handleStateChange: =>\n    readyState = @_rtcDataChannel?.readyState\n    @_isOpen.set(readyState == 'open')\n\nclass @ReactiveDataChannelFactory\n  @fromLabelAndConfig: (label, config) ->\n    dataChannel = new ReactiveDataChannel()\n    dataChannel.setLabelAndConfig(label, config)\n    dataChannel\n\n  @fromRtcDataChannel: (rtcDataChannel) ->\n    dataChannel = new ReactiveDataChannel()\n    dataChannel.setDataChannel(rtcDataChannel)\n    dataChannel\n\n","# A signaller who will only listen to messages from master on it's channel\nclass @SingleWebRTCSignallerFactory\n  @create: (stream, channelName, id, servers, config, mediaConfig, options) ->\n    signaller = new WebRTCSignaller(\n        new share.MessageStreamProxy(stream, channelName, 'master'),\n        id,\n        servers,\n        config,\n        mediaConfig,\n        options\n    )\n    stream.on channelName, (message) ->\n      if message._to == id or message.callMe\n        signaller.handleMessage(message)\n    signaller\n\n","# Identifies unique connections in one session\ncounter = 0\n# Identifies the session\nsessionId = Random.hexString(20)\n\nclass @WebRTCSignaller\n  constructor: (@_messageStream,\n                @_id,\n                @_servers,\n                @_config,\n                mediaConfig,\n                options = {}) ->\n\n    _.defaults options,\n      audioBandwidth: null\n      videoBandwidth: null\n    @_audioBandwidth = options.audioBandwidth\n    @_videoBandwidth = options.videoBandwidth\n    @setMediaConfig(mediaConfig)\n    @_started = new ReactiveVar(false)\n    @_waitingForResponse = new ReactiveVar(false)\n    @_waitingForUserMedia = new ReactiveVar(false)\n    @_waitingToCreateAnswer = new ReactiveVar(false)\n    @_inCall = new ReactiveVar(false)\n    @_lastGetUserMediaError = new ReactiveVar(null)\n    @_localStreamUrl = new ReactiveVar(null)\n    @_remoteStream = new ReactiveVar(null)\n    @_dataChannels = []\n    @_pendingDataChannels = []\n    @_dataChannelsMap = {}\n    @_numberOfDataChannels = new ReactiveVar(@_dataChannels.length)\n    counter += 1\n    @_currentConnectionId =\n      sessionId: sessionId\n      counter: counter\n\n  started: ->\n    @_started.get()\n\n  inCall: ->\n    @_inCall.get()\n\n  waitingForUserMedia: ->\n    @_waitingForUserMedia.get()\n\n  waitingForResponse: ->\n    @_waitingForResponse.get()\n\n  waitingToCreateAnswer: ->\n    @_waitingToCreateAnswer.get()\n\n  lastGetUserMediaError: ->\n    @_lastGetUserMediaError.get()\n\n  getLocalStream: ->\n    @_localStreamUrl.get()\n\n  getRemoteStream: ->\n    @_remoteStream.get()\n\n  getDataChannels: ->\n    @_numberOfDataChannels.get()\n    @_dataChannels\n\n  setMediaConfig: (@mediaConfig) ->\n\n  start: ->\n    @_createRtcPeerConnection()\n\n  addDataChannel: (dataChannel) ->\n    if @_rtcPeerConnection?\n      dataChannel.create(@_rtcPeerConnection)\n    else\n      @_pendingDataChannels.push dataChannel\n    @_addDataChannel(dataChannel)\n\n  createOffer: ->\n    @_createLocalStream(@_createOffer)\n    @_waitingForResponse.set(true)\n\n  requestCall: ->\n    @_sendMessage(callMe: true)\n\n  stop: ->\n    for dataChannel in @_dataChannels\n      dataChannel.close()\n    if @_rtcPeerConnection?\n      @_rtcPeerConnection.close()\n      @_rtcPeerConnection = null\n    if @_localStream?\n      @_localStream.stop()\n      @_localStream = null\n    @_started.set(false)\n    @_changeInCall(false)\n\n  ignoreMessages: ->\n    @_ignoreMessages = true\n\n  _addDataChannel: (dataChannel) ->\n    @_dataChannels.push dataChannel\n    @_dataChannelsMap[dataChannel.getLabel()] = dataChannel\n    @_numberOfDataChannels.set(@_dataChannels.length)\n\n  _sendMessage: (message) ->\n    message.from = @_id\n    message.connectionId = @_currentConnectionId\n    message.toConnectionId = @_currentToConnectionId\n    @_messageStream.emit(message)\n\n  _connectionIdsEqual: (connectionA, connectionB) ->\n    return true unless connectionA? and connectionB?\n    connectionA.counter == connectionB.counter and \\\n      connectionA.sessionId == connectionB.sessionId\n\n  handleMessage: (message) =>\n    if @_ignoreMessages\n      # We've set ignore messages\n      console.log('ignoring message')\n      return\n    if not @_currentToConnectionId? or \\\n        message.connectionId.counter > @_currentToConnectionId.counter or \\\n        message.connectionId.sessionId != @_currentToConnectionId.sessionId\n      @_currentToConnectionId = message.connectionId\n    if message.callMe\n      @stop()\n      @start()\n      @createOffer()\n    else if message.sdp?\n      if @_currentToConnectionId?\n        unless @_connectionIdsEqual(message.toConnectionId,\n                                    @_currentConnectionId)\n          # SDP message is not for me\n          console.log('SDP no for me')\n          return\n      @_handleSDP(JSON.parse(message.sdp))\n    else if message.candidate?\n      if @_currentToConnectionId?\n        unless @_connectionIdsEqual(message.toConnectionId,\n                                   @_currentConnectionId)\n          # ICE message not for me\n          console.log('ICE not for me')\n          return\n      @_handleIceCandidate(JSON.parse(message.candidate))\n    else\n      @_logError('Unknown message', meesage)\n    @_changeInCall(true)\n\n  _changeInCall: (state) ->\n    @_inCall.set state\n    if state\n      @_waitingForResponse.set(false)\n\n  _handleSDP: (sdp) =>\n    remoteDescription = new SessionDescription(sdp)\n    if remoteDescription.type == 'offer'\n      # Create a new RTCPeerConnection, resetting if necessary. It may exist\n      # if we started before we received a call.\n      if @_rtcPeerConnection?\n        @stop()\n      @_createRtcPeerConnection()\n    @_rtcPeerConnection.setRemoteDescription(\n      remoteDescription,\n      @_onRemoteDescriptionSet,\n      @_logError\n    )\n\n  _handleIceCandidate: (candidate) =>\n    iceCandidate = new IceCandidate(candidate)\n    @_rtcPeerConnection.addIceCandidate iceCandidate, @_iceSuccess, @_iceFailure\n\n  _iceSuccess: ->\n    console.log 'added ice candidiate'\n\n  _iceFailure: ->\n    console.error 'Failed to add ice candidate', arguments\n\n  _onIceCandidate: (event) =>\n    return unless event.candidate\n    @_sendMessage(candidate: JSON.stringify(event.candidate))\n\n  _createOffer: =>\n    @_rtcPeerConnection.createOffer(@_localDescriptionCreated, @_logError)\n    @_changeInCall(true)\n\n  _onDataChannel: (event) =>\n    dataChannel = @_dataChannelsMap[event.channel.label]\n    if dataChannel?\n      dataChannel.setDataChannel(event.channel)\n    else\n      dataChannel = ReactiveDataChannelFactory.fromRtcDataChannel(event.channel)\n      @_addDataChannel(dataChannel)\n\n  _onAddStream: (event) =>\n    @_remoteStream.set URL.createObjectURL(event.stream)\n\n  _createLocalStream: (callback) ->\n    # There may be no media config, for no video/audio\n    unless @mediaConfig?\n      return callback()\n    addStreamToRtcPeerConnection = =>\n      @_rtcPeerConnection.addStream(@_localStream)\n    if @_localStream? and _.isEqual(@mediaConfig, @_lastMediaConfig)\n      # Already have a local stream and the media config has not changed, so\n      # we will keep on using the same stream.\n      addStreamToRtcPeerConnection()\n      return callback()\n    @_lastMediaConfig = _.clone(@mediaConfig)\n    @_waitingForUserMedia.set(true)\n    navigator.getUserMedia @mediaConfig, (stream) =>\n      @_localStream = stream\n      addStreamToRtcPeerConnection()\n      @_localStreamUrl.set URL.createObjectURL(stream)\n      if callback?\n        callback()\n      @_waitingForUserMedia.set(false)\n    , (error) =>\n      @_waitingForUserMedia.set(false)\n      @_lastGetUserMediaError.set(error)\n      @_logError(error)\n\n  _localDescriptionCreated: (description) =>\n    description.sdp = @_maybeSetBandwidthLimits(description.sdp)\n    @_rtcPeerConnection.setLocalDescription(description,\n                                           @_onLocalDescriptionSet,\n                                           @_logError)\n\n  _onLocalDescriptionSet: =>\n    @_sendMessage(sdp: JSON.stringify(@_rtcPeerConnection.localDescription))\n\n  _onRemoteDescriptionSet: =>\n    return unless @_rtcPeerConnection.remoteDescription.type == 'offer'\n    @_waitingToCreateAnswer.set(true)\n    @_createLocalStream(@_createAnswer)\n\n  _createAnswer: =>\n    @_rtcPeerConnection.createAnswer(@_localDescriptionCreated, @_logError)\n    @_waitingToCreateAnswer.set(false)\n\n  _createRtcPeerConnection: ->\n    @_rtcPeerConnection = new RTCPeerConnection(@_servers, @_config)\n    @_rtcPeerConnection.onicecandidate = @_onIceCandidate\n    @_rtcPeerConnection.ondatachannel = @_onDataChannel\n    @_rtcPeerConnection.onaddstream = @_onAddStream\n    for dataChannel in @_dataChannels\n      dataChannel.create(@_rtcPeerConnection)\n    @_started.set(true)\n\n  _logError: (message) ->\n    console.error message\n\n  _maybeSetBandwidthLimits: (sdp) ->\n    if @_audioBandwidth?\n      sdp = sdp.replace(\n        /a=mid:audio\\r\\n/g, \"a=mid:audio\\r\\nb=AS:#{@_audioBandwidth}\\r\\n\"\n      )\n    if @_videoBandwidth?\n      sdp = sdp.replace(\n        /a=mid:video\\r\\n/g, \"a=mid:video\\r\\nb=AS:#{@_videoBandwidth}\\r\\n\"\n      )\n    sdp\n\n"]}